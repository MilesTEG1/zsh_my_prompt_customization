# ====================================================================================== #
# ============================== Fichier .zshrc sur MBA M2 ============================= #
# ====================================================================================== #

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH
# Set this with the name of the ethernet interface
# ETH_NAME="enp6s18"
# Set IP interface : https://github.com/romkatv/powerlevel10k/issues/451#issuecomment-1627701391
case $OSTYPE in
darwin*)
    # typeset -g POWERLEVEL9K_IP_INTERFACE=$(route get 1.1.1.1 | awk '/interface:/{print $2}')
    ETH_NAME=$(route get 1.1.1.1 | awk '/interface:/{print $2}')
;;
linux*)
    # typeset -g POWERLEVEL9K_IP_INTERFACE=$(ip -o route get to 1.1.1.1 | awk {' print $5 '})
    ETH_NAME=$(ip -o route get to 1.1.1.1 | awk {' print $5 '})
;;
*)
    # typeset -g POWERLEVEL9K_IP_INTERFACE='eth0'
    ETH_NAME='eth0'
;;
esac



# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"
export ZSH_CUSTOM="$ZSH/custom"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
#ZSH_THEME="powerlevel9k/powerlevel9k"
ZSH_THEME=powerlevel10k/powerlevel10k

typeset -g POWERLEVEL9K_MODE='nerdfont-complete'
#source $ZSH_CUSTOM/themes/powerlevel9k/powerlevel9k.zsh-theme

##### Pour le code des couleurs, voil√† la ligne de commande √† lancer 
#     directement depuis un terminal :
# for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
########

prompt_my_name()  {
  p10k segment -b blue -f white -t 'YOUR_NAME' -i 'üé≤'
  # p10k segment -b blue -f darkblue -t "$(whoami)üåÄ$(hostname)" -i 'ü§ñ'
}

# Please only use this battery segment if you have material icons in your nerd font (or font)
# Otherwise, use the font awesome one in "User Segments"
prompt_zsh_battery_level() {
  local percentage1=`pmset -g ps  |  sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p'`
  local percentage=`echo "${percentage1//\%}"`
  local color='%F{red}'
  local symbol="\uf00d"
  pmset -g ps | grep "discharging" > /dev/null
  if [ $? -eq 0 ]; then
    local charging="false";
  else
    local charging="true";
  fi
  if [ $percentage -le 20 ]
  then symbol='\uf579' ; color='%F{red}' ;
    #10%
  elif [ $percentage -gt 19 ] && [ $percentage -le 30 ]
  then symbol="\uf57a" ; color='%F{red}' ;
    #20%
  elif [ $percentage -gt 29 ] && [ $percentage -le 40 ]
  then symbol="\uf57b" ; color='%F{yellow}' ;
    #35%
  elif [ $percentage -gt 39 ] && [ $percentage -le 50 ]
  then symbol="\uf57c" ; color='%F{yellow}' ;
    #45%
  elif [ $percentage -gt 49 ] && [ $percentage -le 60 ]
  then symbol="\uf57d" ; color='%F{blue}' ;
    #55%
  elif [ $percentage -gt 59 ] && [ $percentage -le 70 ]
  then symbol="\uf57e" ; color='%F{blue}' ;
    #65%
  elif [ $percentage -gt 69 ] && [ $percentage -le 80 ]
  then symbol="\uf57f" ; color='%F{blue}' ;
    #75%
  elif [ $percentage -gt 79 ] && [ $percentage -le 90 ]
  then symbol="\uf580" ; color='%F{blue}' ;
    #85%
  elif [ $percentage -gt 89 ] && [ $percentage -le 99 ]
  then symbol="\uf581" ; color='%F{blue}' ;
    #85%
  elif [ $percentage -gt 98 ]
  then symbol="\uf578" ; color='%F{green}' ;
    #100%
  fi
  if [ $charging = "true" ];
  then color='%F{green}'; if [ $percentage -gt 98 ]; then symbol='\uf584'; fi
  fi
  echo -n "%{$color%}$symbol" ;
}

zsh_internet_signal() {
  local color
  local symbol="\uf7ba"
  if ifconfig ${ETH_NAME} | grep inactive &> /dev/null; then
    color="%F{red}"
  else
    color="%F{blue}"
  fi
  echo -n "%{$color%}$symbol "
}

# prompt_context() {
#  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
#    prompt_segment black default "%(!.%{%F{white}%}.)$DEFAULT_USER"
#  fi
# }

typeset -g POWERLEVEL9K_ALWAYS_SHOW_USER=true
#POWERLEVEL9K_CONTEXT_TEMPLATE="%n"

typeset -g POWERLEVEL9K_PROMPT_ON_NEWLINE=true
typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
typeset -g POWERLEVEL9K_RPROMPT_ON_NEWLINE=true
typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
typeset -g POWERLEVEL9K_SHORTEN_STRATEGY="truncate_beginning"
typeset -g POWERLEVEL9K_RVM_BACKGROUND="black"
typeset -g POWERLEVEL9K_RVM_FOREGROUND="249"
typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_COLOR="red"
typeset -g POWERLEVEL9K_TIME_BACKGROUND="black"
typeset -g POWERLEVEL9K_TIME_FOREGROUND="249"
typeset -g POWERLEVEL9K_TIME_FORMAT="\UF43A %D{%H:%M  \UF133  %d.%m.%y}"
typeset -g POWERLEVEL9K_STATUS_VERBOSE=false
typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND='black'
typeset -g POWERLEVEL9K_VCS_CLEAN_BACKGROUND='green'
typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='black'
typeset -g POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='yellow'
typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='white'
typeset -g POWERLEVEL9K_VCS_MODIFIED_BACKGROUND='black'
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND='black'
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND='blue'

typeset -g POWERLEVEL9K_FOLDER_ICON='ÔÅº'

typeset -g POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE=true
# Show duration of the last command if takes longer than this many seconds.
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0
# Show this many fractional digits. Zero means round to seconds.
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=1
# Duration format: 1d 2h 3m 4s.
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'

typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='\u25CF'
typeset -g POWERLEVEL9K_VCS_UNSTAGED_ICON='\u00b1'
typeset -g POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON='\u2193'
typeset -g POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON='\u2191'
typeset -g POWERLEVEL9K_VCS_COMMIT_ICON="\uf417"
typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="%F{blue}\u256D\u2500%f"
typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="%F{blue}\u2570\uf460%f "
typeset -g POWERLEVEL9K_CUSTOM_BATTERY_STATUS="prompt_zsh_battery_level"
typeset -g POWERLEVEL9K_CUSTOM_INTERNET_SIGNAL="zsh_internet_signal"



typeset -g POWERLEVEL9K_USER_DEFAULT_ICON='\uF415'
# Default User
typeset -g POWERLEVEL9K_USER_DEFAULT_FOREGROUND='white'
typeset -g POWERLEVEL9K_USER_DEFAULT_BACKGROUND='blue'
# Root User
typeset -g POWERLEVEL9K_USER_ROOT_FOREGROUND='red'
typeset -g POWERLEVEL9K_USER_ROOT_BACKGROUND='yellow'
# Sudo User
typeset -g POWERLEVEL9K_USER_SUDO_FOREGROUND='red'
typeset -g POWERLEVEL9K_USER_SUDO_BACKGROUND='yellow'
# Remote User
typeset -g POWERLEVEL9K_USER_REMOTE_FOREGROUND='white'
typeset -g POWERLEVEL9K_USER_REMOTE_BACKGROUND='green'
# Remote Sudo User
typeset -g POWERLEVEL9K_USER_REMOTE_SUDO_FOREGROUND='red'
typeset -g POWERLEVEL9K_USER_REMOTE_SUDO_BACKGROUND='green'

typeset -g POWERLEVEL9K_USER_DEFAULT_ICON_COLOR="white"
typeset -g POWERLEVEL9K_USER_ROOT_ICON_COLOR="red"
typeset -g POWERLEVEL9K_USER_SUDO_ICON_COLOR="red"
typeset -g POWERLEVEL9K_USER_REMOTE_ICON_COLOR="white"
typeset -g POWERLEVEL9K_USER_REMOTE_SUDO_ICON_COLOR="red"

typeset -g POWERLEVEL9K_{ROOT,SUDO,USER}_ICON=$'\uF415'
typeset -g POWERLEVEL9K_USER_ICON="\uF415"
typeset -g POWERLEVEL9K_ROOT_ICON="#"
typeset -g POWERLEVEL9K_SUDO_ICON=$'\uF09C'


################################[ battery: internal battery ]#################################
# Show battery in red when it's below this level and not connected to power supply.
typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20
typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=1
# Show battery in green when it's charging or fully charged.
typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=2
# Show battery in yellow when it's discharging.
typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=3
# Battery pictograms going from low to high level of charge.
typeset -g POWERLEVEL9K_BATTERY_STAGES='\uf58d\uf579\uf57a\uf57b\uf57c\uf57d\uf57e\uf57f\uf580\uf581\uf578'
# Don't show the remaining time to charge/discharge.
typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false
# typeset -g POWERLEVEL9K_BATTERY_BACKGROUND=0
#typeset -g POWERLEVEL9K_CUSTOM_BATTERY_STATUS="prompt_zsh_battery_level"


#####################################[ wifi: wifi speed ]#####################################
# WiFi color.
typeset -g POWERLEVEL9K_WIFI_FOREGROUND=52
typeset -g POWERLEVEL9K_WIFI_BACKGROUND=11
# Custom icon.
# typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='‚≠ê'

# Use different colors and icons depending on signal strength ($P9K_WIFI_BARS).
#
#   # Wifi colors and icons for different signal strength levels (low to high).
#   typeset -g my_wifi_fg=(0 0 0 0 0)                                # <-- change these values
#   typeset -g my_wifi_icon=('WiFi' 'WiFi' 'WiFi' 'WiFi' 'WiFi')     # <-- change these values
#
#typeset -g POWERLEVEL9K_WIFI_CONTENT_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}$P9K_WIFI_LAST_TX_RATE Mbps'
#typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}${my_wifi_icon[P9K_WIFI_BARS+1]}'
#
# The following parameters are accessible within the expansions:
#
#   Parameter             | Meaning
#   ----------------------+---------------
#   P9K_WIFI_SSID         | service set identifier, a.k.a. network name
#   P9K_WIFI_LINK_AUTH    | authentication protocol such as "wpa2-psk" or "none"
#   P9K_WIFI_LAST_TX_RATE | wireless transmit rate in megabits per second
#   P9K_WIFI_RSSI         | signal strength in dBm, from -120 to 0
#   P9K_WIFI_NOISE        | noise in dBm, from -120 to 0
#   P9K_WIFI_BARS         | signal strength in bars, from 0 to 4 (derived from P9K_WIFI_RSSI and P9K_WIFI_NOISE)
#
# All parameters except P9K_WIFI_BARS are extracted from the output of the following command:
#
#   /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I



###############################[ public_ip: public IP address ]###############################
# Public IP color.
typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=52
typeset -g POWERLEVEL9K_PUBLIC_IP_BACKGROUND=11
# Custom icon.
# typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='‚≠ê'

########################[ vpn_ip: virtual private network indicator ]#########################
# VPN IP color.
# typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=0
# typeset -g POWERLEVEL9K_VPN_IP_BACKGROUND=6
# When on VPN, show just an icon without the IP address.
# Tip: To display the private IP address when on VPN, remove the next line.
typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=
# Regular expression for the VPN network interface. Run `ifconfig` or `ip -4 a show` while on VPN
# to see the name of the interface.
typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(wg|(.*tun))[0-9]*'
# If set to true, show one segment per matching network interface. If set to false, show only
# one segment corresponding to the first matching network interface.
# Tip: If you set it to true, you'll probably want to unset POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION.
typeset -g POWERLEVEL9K_VPN_IP_SHOW_ALL=false
# Custom icon.
# typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='‚≠ê'

###########[ ip: ip address and bandwidth usage for a specified network interface ]###########
# IP color.
typeset -g POWERLEVEL9K_IP_BACKGROUND='blue'
typeset -g POWERLEVEL9K_IP_FOREGROUND='white'

# The following parameters are accessible within the expansion:
#
#   Parameter             | Meaning
#   ----------------------+---------------
#   P9K_IP_IP         | IP address
#   P9K_IP_INTERFACE  | network interface
#   P9K_IP_RX_BYTES   | total number of bytes received
#   P9K_IP_TX_BYTES   | total number of bytes sent
#   P9K_IP_RX_RATE    | receive rate (since last prompt)
#   P9K_IP_TX_RATE    | send rate (since last prompt)
# typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION='${P9K_IP_RX_RATE:+‚á£$P9K_IP_RX_RATE }${P9K_IP_TX_RATE:+‚á°$P9K_IP_TX_RATE }$P9K_IP_IP'
# typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION=$'\uFBF1''${P9K_IP_RX_RATE:+ %70F‚á£$P9K_IP_RX_RATE}${P9K_IP_TX_RATE:+ %215F‚á°$P9K_IP_TX_RATE}$P9K_IP_IP'
typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION=$'\uFBF1 $P9K_IP_IP'

# Show information for the first network interface whose name matches this regular expression.
# Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.
# typeset -g POWERLEVEL9K_IP_INTERFACE='en0'
# Set IP interface : https://github.com/romkatv/powerlevel10k/issues/451#issuecomment-1627701391
typeset -g POWERLEVEL9K_IP_INTERFACE=${ETH_NAME}

# case $OSTYPE in
# darwin*)
#     typeset -g POWERLEVEL9K_IP_INTERFACE=$(route get 1.1.1.1 | awk '/interface:/{print $2}')
# ;;
# linux*)
#     typeset -g POWERLEVEL9K_IP_INTERFACE=$(ip -o route get to 1.1.1.1 | awk {' print $5 '})
# ;;
# *)
#     typeset -g POWERLEVEL9K_IP_INTERFACE='eth0'
# ;;
# esac


# Custom icon.
typeset -g POWERLEVEL9K_IP_VISUAL_IDENTIFIER_EXPANSION=
# typeset -g POWERLEVEL9K_IP_VISUAL_IDENTIFIER_EXPANSION='‚≠ê'
# prompt_my_ip()  {
#   emulate -L zsh
#   [[ -z $P9K_IP_IP ]] && return
#   p10k segment -b 8 -f 38 -i "%F{blue}"$'\uFBF1' -t "%F{blue}$P9K_IP_IP"
#   p10k segment -b 8 -t "%70F‚á£$P9K_IP_RX_RATE %215F‚á°$P9K_IP_TX_RATE"
# }

# typeset -g POWERLEVEL9K_IP_BACKGROUND='blue'
# typeset -g POWERLEVEL9K_IP_FOREGROUND='white'


typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
  # =========================[ Line #1 ]=========================
  os_icon                 # os identifier
  my_name
  #user
  custom_internet_signal
  #custom_battery_status_joined
  ssh
  root_indicator
  dir                     # current directory
  dir_writable
  vcs                     # git status
  # =========================[ Line #2 ]=========================
  #newline                 # \n
  # prompt_char           # prompt symbol
)
typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
  # =========================[ Line #1 ]=========================
  battery               # internal battery
  wifi                  # wifi speed
  public_ip    # Custom Colors are working
  ip  # my_ip
  newline
  command_execution_time  # duration of the last command
  status                  # exit code of the last command

  background_jobs         # presence of background jobs
  direnv                  # direnv status (https://direnv.net/)
  asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)
  virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
  # anaconda                # conda environment (https://conda.io/)
  # pyenv                   # python environment (https://github.com/pyenv/pyenv)
  # goenv                   # go environment (https://github.com/syndbg/goenv)
  nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)
  nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)
  nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)
  # node_version          # node.js version
  # go_version            # go version (https://golang.org)
  # rust_version          # rustc version (https://www.rust-lang.org)
  # dotnet_version        # .NET version (https://dotnet.microsoft.com)
  # php_version           # php version (https://www.php.net/)
  # laravel_version       # laravel php framework version (https://laravel.com/)
  # java_version          # java version (https://www.java.com/)
  # package               # name@version from package.json (https://docs.npmjs.com/files/package.json)
  # rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)
  # rvm                     # ruby version from rvm (https://rvm.io)
  # fvm                     # flutter version management (https://github.com/leoafarias/fvm)
  # luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)
  # jenv                    # java version from jenv (https://github.com/jenv/jenv)
  # plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)
  # phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)
  #haskell_stack           # haskell version from stack (https://haskellstack.org/)
  #kubecontext             # current kubernetes context (https://kubernetes.io/)
  #terraform               # terraform workspace (https://www.terraform.io)
  #aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
  #aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)
  #azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)
  #gcloud                  # google cloud cli account and project (https://cloud.google.com/)
  #google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)
  # nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)
  # ranger                  # ranger shell (https://github.com/ranger/ranger)
  # nnn                     # nnn shell (https://github.com/jarun/nnn)
  vim_shell               # vim shell indicator (:sh)
  midnight_commander      # midnight commander shell (https://midnight-commander.org/)
  # nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)
  ##vi_mode                 # vi mode (you don't need this if you've enabled prompt_char)
  vpn_ip                # virtual private network indicator
  # load                  # CPU load
  # swap                  # used swap
  #todo                    # todo items (https://github.com/todotxt/todo.txt-cli)
  #timewarrior             # timewarrior tracking status (https://timewarrior.net/)
  #taskwarrior             # taskwarrior task count (https://taskwarrior.org/)
  time                    # current time
  disk_usage            # disk usage
  #ram                   # free RAM
  #context                 # user@hostname
  #ip my_ip
  # =========================[ Line #2 ]=========================
  #newline
  #ip                    # ip address and bandwidth usage for a specified network interface
  #public_ip             # public IP address
  # proxy                 # system-wide http/https/ftp proxy

  # example               # example user-defined segment (see prompt_example function below)
)
#typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon user custom_internet_signal custom_battery_status_joined ssh root_indicator dir dir_writable vcs)
#typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command_execution_time  status  time)

DISABLE_UPDATE_PROMPT=true



# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="dd/mm/yyyy"


# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(iterm2 git macos zsh-autosuggestions zsh-syntax-highlighting zsh-completions colored-man-pages brew z aliases command-not-found sudo docker python virtualenv colorize zsh-eza)
plugins=(iterm2 git macos zsh-autosuggestions zsh-syntax-highlighting zsh-completions colored-man-pages brew z aliases command-not-found sudo python virtualenv colorize zsh-eza)
autoload -U compinit && compinit

zstyle :omz:plugins:iterm2 shell-integration yes

source $ZSH/oh-my-zsh.sh

source $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh



# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
#
# Changement des variables locale :
# https://serverfault.com/questions/54591/how-to-install-change-locale-on-debian
export LC_ALL=fr_FR.UTF-8
export LANG=fr_FR.UTF-8
export LANGUAGE=fr_FR.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases

## ###############################################
## Shell Colors
## ###############################################
## Source : https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux/28938235#28938235
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # BYellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

#  Italic
ItBlack='\033[3;30m'       # Black
ItRed='\033[3;31m'         # Red
ItGreen='\033[3;32m'       # Green
ItBYellow='\033[3;33m'      # BYellow
ItBlue='\033[3;34m'        # Blue
ItPurple='\033[3;35m'      # Purple
ItCyan='\033[3;36m'        # Cyan
ItWhite='\033[3;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UBYellow='\033[4;33m'      # BYellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_BYellow='\033[43m'      # BYellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IBYellow='\033[0;93m'      # BYellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIBYellow='\033[1;93m'     # BYellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IBYellow='\033[0;103m'  # BYellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White
## ###############################################

# Lignes de commande pour installer les plugins OMZ
Install_OMZ_Plugins() {
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
  # git clone https://github.com/DarrinTisdale/zsh-aliases-exa.git ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-aliases-exa
  git clone https://github.com/z-shell/zsh-eza.git ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-eza
  git clone https://github.com/eza-community/eza.git ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/eza
}

# Utilisation de la commande lsd (√† installer avec HomeBrew)
#alias ls='lsd'
# alias l='lsd'
# alias ls='lsd'
# alias la='lsd -a'
# alias lla='lsd -la'
# alias ltree='lsd --tree'
# alias lt='lsd -t'     # Afficher ls Trier par date
# alias ltr='lsd -tr'   # Inverser ls Trier par date Sortie
# alias llt='lla -t'     # Afficher ls Trier par date, tous les fichiers
# alias lltr='lla -tr'   # Inverser ls Trier par date Sortie, tous les fichiers


###############################################
# Project:  zsh-eza
# File:     /zsh-eza.plugin.zsh
#
# general use
alias ls_ls='/bin/ls'

eza_params=('--git' '--icons' '--classify' '--group-directories-first' '--time-style=long-iso' '--group')
alias ls='eza $eza_params'
alias l='eza --git-ignore $eza_params'
alias ll='eza --all --header --long $eza_params'
alias llm='eza --all --header --long --sort=modified $eza_params'
alias la='eza -lbhHigUmuSa'
alias lx='eza -lbhHigUmuSa@'
alias lt='eza --tree $eza_params'
alias tree='eza --tree $eza_params'

# alias ls='eza -gh --git --icons'                                                         # ls
# alias l='eza -glbFh --git --icons'                                               # list, size, type, git
# alias ll='eza -glbGFh --git --icons'                                             # long list
# alias lla='eza -glbGFha --git --icons'                                             # long list + all files
# alias llm='eza -glbGFh --git --icons --sort=modified'                            # long list, modified date sort
# alias la='eza -lbhHigUmuSa --time-style=long-iso --git --icons --color-scale'  # all list
# alias lx='eza -lbhHigUmuSa@ --time-style=long-iso --git --icons --color-scale' # all + extended list

# speciality views
alias lS='eza -1 --icons'			                                                  # one column, just names
alias lt='eza --tree --level=2 --icons'                                         # tree
###############################################


## Alias pour HomeBrew
#alias brewup='brew update; brew upgrade; brew cleanup'

brewup()  {
  echo "-----> MAJ de HomeBrew : brew update"
  brew update
  echo "-----> MAJ de HomeBrew : brew upgrade"
  # echo "----->      Si un message apparait disant :"
  # echo "----->            Error: Not upgrading 1 \`installer manual\` cask."
  # echo "----->            libreoffice-language-pack"
  # echo "----->      Il faudra taper la commande : brew reinstall libreoffice-language-pack"
  brew upgrade
  echo "-----> MAJ de HomeBrew : brew cleanup"
  brew cleanup
}

## Alias pour tout mettre √† jour
app_update()  {
  param_1="$1"    # Si = "ForceCaskUpdate" : on force l'update de toutes les casks 
                  # Si = "NoForceCaskUpdate" : on ne force pas l'update des casks
  echo "-----> MAJ de HomeBrew"
  brewup
  echo
  echo "-----> MAJ des Cask HomeBrew"
  if [ $param_1 = "ForceCaskUpdate" ]
  then
    brew cu -facy
  elif [ $param_1 = "NoForceCaskUpdate" ]
  then
    brew cu -fcy
  fi
  echo
  echo "-----> MAJ de powerlevel10k"
  git -C $ZSH_CUSTOM/themes/powerlevel10k pull --rebase origin master
  # git -C ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k pull
  echo
  echo "MAJ zsh-syntax-highlighting"
  git -C $ZSH_CUSTOM/plugins/zsh-syntax-highlighting pull --rebase origin master
  echo
  echo "-----> MAJ zsh-autosuggestions"
  git -C $ZSH_CUSTOM/plugins/zsh-autosuggestions pull --rebase origin master
  echo
  echo "-----> MAJ zsh-completions"
  git -C $ZSH_CUSTOM/plugins/zsh-completions pull --rebase origin master
  echo

  echo "-----> MAJ zsh-eza"
  # Commande d'installation :
  # git clone https://github.com/z-shell/zsh-eza.git ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-eza
  git -C $ZSH_CUSTOM/plugins/zsh-eza pull --rebase origin main
  git -C $ZSH_CUSTOM/plugins/eza pull --rebase origin main

  echo
  echo "-----> MAJ de OMZ"
  omz update
  echo
}


# Fonction pour r√©cup√©rer le hash sha256 d'un texte pass√© en argument
# Get SHA256 of a text
# Usage:   sha256 password
# output:  5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
get_sha256()  {
  text=$1
  echo "Texte √† hasher : $text"
  echo -n "HASH sha256 = "
  hash=($(echo -n $text | shasum -a 256))
  echo $hash
  # Source: http://albertech.blogspot.fr/2015/02/generate-sha-256-hash-from-command-line.html
}

disable_ipv6()  {
  # sudo networksetup -listallnetworkservices
  sudo networksetup -setv6off "USB 10/100/1000 LAN"
  sudo networksetup -setv6off "USB 10/100/1G/2.5G LAN"
  sudo networksetup -setv6off "Wi-Fi"
  sudo networksetup -setv6off "VPN-SRM L2TP-IPsec"
  sudo networksetup -setv6off "iPhone USB"
}

enable_ipv6()  {
  # sudo networksetup -listallnetworkservices
  sudo networksetup -setv6automatic "USB 10/100/1000 LAN"
  sudo networksetup -setv6automatic "USB 10/100/1G/2.5G LAN"
  sudo networksetup -setv6automatic "Wi-Fi"
  sudo networksetup -setv6automatic "VPN-SRM L2TP-IPsec"
  sudo networksetup -setv6automatic "iPhone USB"
}

## Alias fournis par le plugins OMZ brew :
# alias brewp='brew pin'
# alias brews='brew list -1'
# alias brewsp='brew list --pinned'
# alias bubo='brew update && brew outdated'
# alias bubc='brew upgrade && brew cleanup'
# alias bubu='bubo && bubc'
# alias bcubo='brew update && brew cask outdated'
# alias bcubc='brew cask reinstall $(brew cask outdated) && brew cleanup'

# Modification du dossier d'instalaltion des cask homebrew
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

export PATH="/usr/local/sbin:$PATH"

# Pour les outils Google Android
# if [ -d "$HOME/adb-fastboot/platform-tools" ] ; then
#  export PATH="$HOME/adb-fastboot/platform-tools:$PATH"
# fi

# Non fonctionnel sous macOS
# export LDFLAGS="-L/usr/local/opt/zlib/lib"
# export CPPFLAGS="-I/usr/local/opt/zlib/include"

# Fonctionnel apr√®s installation via homebrew
export LDFLAGS="-L/opt/homebrew/opt/openssl@1.1/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@1.1/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@1.1/lib/pkgconfig"
export PATH="/opt/homebrew/opt/openssl@1.1/bin:$PATH"
export PATH="/opt/homebrew/opt/imagemagick@6/bin:$PATH"

export FPATH="~/.oh-my-zsh/custom}/plugins/eza/completions/zsh:$FPATH"

# For autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh


# (The below instructions are intended for common
# shell setups. See the README for more guidance
# if they don't apply and/or don't work for you.)

# Add pyenv executable to PATH and
# enable shims by adding the following
# to ~/.profile and ~/.zprofile:
# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init --path)"

# Load pyenv into the shell by adding
# the following to ~/.zshrc:

# eval "$(pyenv init -)"

# Make sure to restart your entire logon session
# for changes to profile files to take effect.

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# export PATH="/usr/local/opt/openjdk/bin:$PATH"
# export GPG_TTY=$(tty)

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Add Visual Studio Code (code)
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

source_zsh()  {
    source ~/.zshrc
}

pathmunge() {
    # Usage :   pathmunge /path_to_add [ after ]
    #           *   /path_to_add is mandatory
    #           *   after is optional and tell to add the path at the end of $PATH
    if [[ ":$PATH:" != *":${1}:"* ]]; then
        if [ "$2" = "after" ]; then
            PATH="${PATH}:${1}"
        else
            PATH="${1}:${PATH}"
        fi
    fi

    # if ! echo "$PATH" | grep -Eq "(^|:)$1($|:)"; then
    #     if [ "$2" = "after" ]; then
    #         PATH="$PATH:$1"
    #     else
    #         PATH="$1:$PATH"
    #     fi
    # fi
}

function icns-to-png()
{
  sips -s format png $1 --out $2
}

function yes_or_no() {
    MESSAGE="$1"
    # http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html#index-read
    if read -q "CHOICE?Press y/Y to continue with $MESSAGE :"; then
        return 0
    else
        echo
        echo "'$CHOICE' not 'Y' or 'y'. Exiting..."
        return 1
    fi
}

__verif_installation_brew_app() {
    APP_TO_VERIFY="$1"
    BINARY_TO_SEARCH="$2"
    if [[ -z "${APP_TO_VERIFY}" ]]; then
        printf "\nLe nom de l'application √† installer avec HomeBrew n'est pas sp√©cifier...\n"
        read -s -k '?Press any key to continue.'
        exit 1
    fi
    if [[ -z "${BINARY_TO_SEARCH}" ]]; then
        printf "\nLe nom du binaire √† chercher n'est pas pr√©cis√©.\nOn prend alors le nom de l'application : %s\n" $APP_TO_VERIFY
        BINARY_TO_SEARCH=$APP_TO_VERIFY
        read -s -k '?Press any key to continue.'
        exit 1
    fi
    
    command -v /opt/homebrew/bin/"$BINARY_TO_SEARCH" >/dev/null 2>&1
    if (($? != 0)); then
        # http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html#index-read
        if read -q "CHOICE?Press y/Y to continue with installation of $APP_TO_VERIFY :"; then
            printf "\n     --> Installation de %s....\n" $APP_TO_VERIFY
            brew install $APP_TO_VERIFY
            if (($? != 0)); then
                printf "\n     --> Impossible d'installer %s... Fin du script.\n" $APP_TO_VERIFY
                read -s -k '?Press any key to continue.'
                exit 1
            fi
        else
            printf
            printf "\nPas d'installation de $APP_TO_VERIFY. Exiting...\n"
            read -s -k '?Press any key to continue.'
            exit 1
        fi
        
    else
        printf "\n     --> %s est bien install√©, on peut continuer.\n" $APP_TO_VERIFY
        return 0
    fi
}

# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
valid_ip() {
    local IP=$1
    local stat=1
    declare -a digits_groups

    if [[ $IP =~ ^([[:digit:]]{1,3})\.([[:digit:]]{1,3})\.([[:digit:]]{1,3})\.([[:digit:]]{1,3})$ ]]; then
        # DIGITS_GROUPS=${match[*]}
        # echo ${DIGITS_GROUPS[*]}
        # We know that it's 4 groups of 3 digits !

        # If 1st digits or last equal 0 : not a valid IP
        
        if [ $(($match[1])) -eq 0 ]; then
            # DEBUG
            # printf "Digits n¬∞1 ( %d ) = 0 : it's not OK, not a valid IP !\n" ${match[1]}
            stat=0
            return $stat
        elif [ $(($match[4])) -eq 0 ]; then
            # DEBUG
            # printf "Digits n¬∞4 ( %d ) = 0 : it's not OK, not a valid IP !\n" ${match[4]}
            stat=0
            return $stat
        fi

        for ((i = 1; i <= 4; i++)); do
            # echo "Digits group n¬∞$i = ${match[$i]}"
            digits_groups[$i]=$match[$i]
            # digits_groups[$i]=$((${digits_groups[$i]} + 1))
            # echo "Digits group n¬∞$i = ${digits_groups[$i]}"

            if [ $((${digits_groups[$i]})) -gt 254 ]; then
                # digits > 254 : not a valid IP
                # DEBUG
                # printf "Digits n¬∞%d : %d > 254 -> it's not OK, not a valid IP !\n" $i ${digits_groups[$i]}

                stat=0
                return $stat
            else
                # DEBUG
                # printf "Digits n¬∞%d : %d < 255 -> it's OK !\n" $i ${digits_groups[$i]}
            fi
        done

        echo $grp1
        stat=1
        # printf "%s is a valid IP !\n" $IP
    else
        ## IP address is correct, and returned
        stat=0
        # printf "%s is not a valid IP !\n" $IP
    fi
   
    return $stat
}

iperf_both_ways() {
    param_1="$1"   # IP du serveur
    param_2="$2"   # de chaque test
    # INTERFACE="$3" # Interface √† li√©e : par d√©faut ce sera eth2 (2,5Gbps)

    if [ -z "${param_1}" ]; then
        # echo -e "Aucun param√®tre indiqu√© !\n"
        # echo -e "\t--> iperf_both_ways < IP > < Dur√©e >\n"
        # echo -e "\t\tIP = Adresse IP du serveur iperf3\n"
        # echo -e "\t\tDur√©e (facultatif) = Dur√©e d'un test, en seconde, par d√©faut = 10s \n"
        printf "   Aucun param√®tre indiqu√© !\n"
        printf "\t--> iperf_both_ways < IP > < Dur√©e >\n"
        printf "\t\tIP = Adresse IP du serveur iperf3\n"
        printf "\t\tDur√©e (facultatif) = Dur√©e d'un test, en seconde, par d√©faut = 10s \n"
        return 1
    fi
    # if [ -z "${INTERFACE}" ]; then
    #     __verif_installation_brew_app "iproute2mac" "ip"
    #     # Voir ici : https://unix.stackexchange.com/a/673087
    #     # INTERFACE=$(ip r | grep default | awk '/default/ {print $5}')       # Fonctionne sur le Synology mais retourne plusieurs interface sur le MAC si le VPN est actif.
    #     INTERFACE=$(ip r | grep default | awk '/default/ {print $5; exit;}')  # Ne r√©cup√®re que la premi√®re interface qui est trouv√©e s'il y a plusieurs par d√©faut, notemment si un VPN est connect√©.
    #     # Voir ici : https://stackoverflow.com/a/10513738/17694638
    #     # INTERFACE=$(ip route get 0.0.0.0/0 | awk '{ print $NF }')       # Fonctionne sous macOS

    #     printf "\n\tL'interface li√©e sera celle par d√©faut, c'est-√†-dire : %s\n" $INTERFACE
    # fi
    # # Test de l'interface du ${INTERFACE} : existe-t-elle ?
    # # result_interface=$(ip -br l | awk '$1 ~ "^eth*" { print $1}' | grep $INTERFACE)     # Voir ici : https://serverfault.com/a/845116
    # result_interface=$(ip r | grep "dev $INTERFACE" | sed 's/^.*dev //' | awk '{print $1; exit;}')
    # printf "\nTest de l'existence de %s\n" $INTERFACE
    # printf "\tR√©sultat du grep :\t"
    # printf "%s\t" $result_interface
    # if [[ "${INTERFACE}" == "${result_interface}" ]]; then
    #     printf "\nL'interface %s existe bien.\n" $INTERFACE
    # elif [[ -z "${result_interface}" ]]; then
    #     printf "\nL'interface %s n'existe pas.\n" $INTERFACE
    #     exit 1
    # else
    #     printf "\nPlusieurs interface correspondent √† l'interface choisie ( %s ).\nIl faut v√©rifier que le n¬∞ de l'interface est bien pr√©sent.\n" $INTERFACE
    #     exit 1
    # fi
    valid_ip $param_1
    result=$?
    if [ $result -eq 0 ]; then
        # echo -e "L'adresse IP entr√©e n'est pas valide : $param_1\n"
        printf "L'adresse IP entr√©e n'est pas valide : %s\n" $param_1
        return 1
    else
        printf "%s est une adresse IP valide. Le test iperf3 va pouvoir s'ex√©ctuer.\n" $param_1

    fi
    if [ -z "${param_2}" ]; then
        param_2=20
    fi
    # iperf3 --bind-dev $INTERFACE -c $param_1 -t $param_2 && iperf3 --bind-dev $INTERFACE -c $param_1 -t $param_2 -R
    iperf3 -c $param_1 -t $param_2 && iperf3 -c $param_1 -t $param_2 -R

    printf "\nFin du test iperf3.\n"
}

brew_alias()  {
    alias brewi='brew install'
    alias brewci='brew install --cask'
    alias brewse='brew search'
    alias brewnfo='brew info'

    echo -e "\n${BWhite}Alias pour Brew (utiliser la commande ${BYellow}brew_alias${BWhite} pour les afficher)${Color_Off}"
    echo -e "\talias ${BYellow}brewi${Color_Off}='${Cyan}brew install${Color_Off}'"
    echo -e "\talias ${BYellow}brewci${Color_Off}='${Cyan}brew install --cask${Color_Off}'"
    echo -e "\talias ${BYellow}brewse${Color_Off}='${Cyan}brew search${Color_Off}'"
    echo -e "\talias ${BYellow}brewnfo${Color_Off}='${Cyan}brew info${Color_Off}'"
    echo -e "\talias ${BYellow}brewup${Color_Off}='${Cyan}brew update${Color_Off} puis ${Cyan}brew update${Color_Off} puis ${Cyan}brew cleanup${Color_Off}'"
}

autres_aliases()  {

    alias dirsize='du -hc -d 1'

    alias update_all='app_update "NoForceCaskUpdate"'
    alias update_all_force='app_update "ForceCaskUpdate"'

    alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'

    echo -e "\n${BWhite}Autres alias (utiliser la commande ${BYellow}autres_aliases${BWhite} pour les afficher)${Color_Off}"
    
    echo -e "\talias ${BYellow}dirsize${Color_Off}='${Cyan}du -hc -d 1 ${BWhite}<path_to_dirsize>${Color_Off}'"
    echo -e "\talias ${BYellow}update_all${Color_Off} pour mettre √† jour brew (sans forcer les casks) et Oh My ZSH avec ses plugins.${Color_Off}"
    echo -e "\talias ${BYellow}update_all_force${Color_Off} pour mettre √† jour brew (en for√ßant la MAJ des casks) et Oh My ZSH avec ses plugins.${Color_Off}"
    echo -e "\talias ${BYellow}flushdns${Color_Off} pour vider le cache DNS.${Color_Off}'"
    echo -e "\talias ${BYellow}get_sha256${Color_Off} pour hasher en sha256 une chaine de caract√®re : '${Cyan}get_sha256 ${BWhite}<Text_To_Hash>${Color_Off}'"
    echo -e "\talias ${BYellow}iperf_both_ways${Color_Off} pour lancer un iperf3 dans les deux sens : '${Cyan}iperf_both_ways ${BWhite}<ip> <dur√©e (facultative)>${Color_Off}'"

}

macOS_Alias() {
    ## Edite le fichier ~/.zshrc
    alias zshrc_edit='code ~/.zshrc'
    ## Affiche les fichiers cach√©s
    alias show_hidden_files='defaults write com.apple.finder AppleShowAllFiles -bool true ; killall Finder'
    ## Masque les fichiers cach√©s
    alias hide_hidden_files='defaults write com.apple.finder AppleShowAllFiles -bool false ; killall Finder'

    alias p10k_update='git -C $ZSH_CUSTOM/themes/powerlevel10k pull --rebase origin master'
    alias omz_plugins_update='echo "MAJ zsh-syntax-highlighting" ; git -C $ZSH_CUSTOM/plugins/zsh-syntax-highlighting pull --rebase origin master ; echo "MAJ zsh-autosuggestions" ; git -C $ZSH_CUSTOM/plugins/zsh-autosuggestions pull --rebase origin master ; echo "MAJ zsh-completions" ; git -C $ZSH_CUSTOM/plugins/zsh-completions pull --rebase origin master'

    alias get_screen_definition='system_profiler SPDisplaysDataType | grep Resolution'
    
    echo -e "\n${BWhite}Alias macOS (utiliser la commande ${BYellow}macOS_Alias${BWhite} pour les afficher)${Color_Off}"
    echo -e "\talias ${BYellow}zshrc_edit${Color_Off} pour √©diter avec VSCode le fichier ${BWhite}~/.zshrc${Color_Off}.${Color_Off}"

    echo -e "\talias ${BYellow}show_hidden_files${Color_Off} pour afficher les fichiers cach√©s dans le Finder.${Color_Off}"
    echo -e "\talias ${BYellow}hide_hidden_files${Color_Off} pour masquer les fichiers cach√©s dans le Finder.${Color_Off}"
    echo -e "\talias ${BYellow}p10k_update${Color_Off} pour MAJ powerlevel10k.${Color_Off}"
    echo -e "\talias ${BYellow}omz_plugins_update${Color_Off} pour MAJ les pugines de OMZ.${Color_Off}"
    echo -e "\talias ${BYellow}disable_ipv6${Color_Off} pour d√©sactiver l'IPv6 sur les interfaces : USB, WiFi, VPN L2TP...${Color_Off}"
    echo -e "\talias ${BYellow}enable_ipv6${Color_Off} pour activer l'IPv6 sur les interfaces : USB, WiFi, VPN L2TP...${Color_Off}"
    echo -e "\talias ${BYellow}get_screen_definition${Color_Off} pour afficher la r√©solution de l'√©cran.${Color_Off}"

}


show_aliases()  {
    echo -e "\n"
    echo -e "\n${BBlue}Rappel de quelques alias utiles ${BRed}(√† lancer en root)${BYellow} :${Color_Off}"
    
    brew_alias
    macOS_Alias
    autres_aliases

    echo -e "\nPour recharger le fichier ${BPurple}.zshrc${Color_Off}, utiliser l'alias : ${BYellow}source_zsh${Color_Off}"
    echo -e "\n "
}

# archey -l retro
archey --config-path ~/.config/archey4/config.json --logo-style retro

# On affiche tous les alias, fonction qui peut √™tre appel√©e n'importe quand, pratique ;)
show_aliases

echo -e "\n${BWhite}Pour autoriser une application ne venant pas d'une source officielle :\n\t${Cyan} sudo xattr -rd com.apple.quarantine /Applications/xxxxx.app${Color_Off}"
# echo -e "\talias ${BYellow}alias${Color_Off}='${Cyan}COMMAND${Color_Off}'"


# Created by `pipx` on 2023-04-09 06:30:48
export PATH="$PATH:$HOME/.local/bin"

# This is for ZSH pulgins colorize : https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colorize
ZSH_COLORIZE_TOOL=pygmentize
ZSH_COLORIZE_STYLE="monokai"
ZSH_COLORIZE_CHROMA_FORMATTER=terminal256
